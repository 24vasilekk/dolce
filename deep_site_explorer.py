#!/usr/bin/env python3
"""
BestSecret Deep Explorer - –ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–∞–π—Ç–∞
–ò–∑—É—á–∞–µ—Ç —Ö–µ–¥–µ—Ä, —Ñ–∏–ª—å—Ç—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
from bs4 import BeautifulSoup
import re

class DeepBestSecretExplorer:
    """–ì–ª—É–±–æ–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BestSecret"""
    
    def __init__(self, email: str, password: str):
        self.email = email
        self.password = password
        self.driver = None
        self.is_logged_in = False
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        self.exploration_results = {
            "timestamp": datetime.now().isoformat(),
            "header_deep_analysis": {},
            "all_categories": {},
            "all_subcategories": {},
            "filter_systems": {},
            "product_page_analysis": {},
            "size_extraction_methods": {},
            "navigation_paths": {},
            "interactive_elements": {},
            "page_variations": {}
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
    
    def initialize_driver(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            options = Options()
            options.add_argument("--window-size=1400,900")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ BestSecret"""
        try:
            self.driver.get("https://www.bestsecret.com/entrance/index.htm")
            time.sleep(5)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
            self._handle_cookie_consent()
            
            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Login
            try:
                login_btn = WebDriverWait(self.driver, 15).until(
                    EC.element_to_be_clickable((By.ID, "login-button"))
                )
                self.driver.execute_script("arguments[0].click();", login_btn)
            except:
                self.driver.get("https://login.bestsecret.com")
            
            time.sleep(5)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            username_field = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = self.driver.find_element(By.ID, "password")
            
            username_field.clear()
            username_field.send_keys(self.email)
            password_field.clear()
            password_field.send_keys(self.password)
            
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'LOGIN')]")
            login_button.click()
            
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
            current_url = self.driver.current_url
            if "bestsecret.com" in current_url and "login." not in current_url:
                self.is_logged_in = True
                self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. URL: {current_url}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _handle_cookie_consent(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ cookies"""
        try:
            cookie_selectors = [
                "button[data-v-62969886]",
                ".cmp-overlay button", 
                "[data-testid='accept-cookies']"
            ]
            
            for selector in cookie_selectors:
                try:
                    cookie_btn = WebDriverWait(self.driver, 2).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    cookie_btn.click()
                    time.sleep(2)
                    return True
                except:
                    continue
        except:
            pass
        
        return False
    
    def deep_explore_header(self):
        """–ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ö–µ–¥–µ—Ä–∞"""
        self.logger.info("üî¨ –ì–õ–£–ë–û–ö–û–ï –ò–ó–£–ß–ï–ù–ò–ï –•–ï–î–ï–†–ê...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Ö–µ–¥–µ—Ä–∞
            header_html = self.driver.execute_script("return document.querySelector('header').outerHTML")
            soup = BeautifulSoup(header_html, 'html.parser')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ö–µ–¥–µ—Ä–∞
            header_analysis = {
                "total_elements": len(soup.find_all()),
                "navigation_elements": [],
                "interactive_elements": [],
                "category_switches": [],
                "all_links": [],
                "form_elements": []
            }
            
            # –í—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            nav_elements = soup.find_all(['nav', 'ul', 'li'])
            for nav in nav_elements:
                nav_info = {
                    "tag": nav.name,
                    "id": nav.get('id'),
                    "classes": nav.get('class', []),
                    "text": nav.get_text(strip=True)[:100],
                    "children_count": len(nav.find_all())
                }
                header_analysis["navigation_elements"].append(nav_info)
            
            # –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
            links = soup.find_all('a')
            for link in links:
                link_info = {
                    "href": link.get('href', ''),
                    "text": link.get_text(strip=True),
                    "id": link.get('id'),
                    "classes": link.get('class', []),
                    "css_selector": self._generate_css_path(link)
                }
                header_analysis["all_links"].append(link_info)
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            interactive = soup.find_all(['button', 'input', 'select'])
            for elem in interactive:
                elem_info = {
                    "tag": elem.name,
                    "type": elem.get('type', ''),
                    "id": elem.get('id'),
                    "classes": elem.get('class', []),
                    "text": elem.get_text(strip=True)
                }
                header_analysis["interactive_elements"].append(elem_info)
            
            self.exploration_results["header_deep_analysis"] = header_analysis
            self.logger.info(f"‚úÖ –•–µ–¥–µ—Ä: {header_analysis['total_elements']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {len(header_analysis['all_links'])} —Å—Å—ã–ª–æ–∫")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–∞: {e}")
    
    def explore_all_categories(self):
        """–ò–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.logger.info("üóÇÔ∏è –ò–ó–£–ß–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô...")
        
        try:
            categories_found = {
                "gender_categories": [],
                "main_categories": [],
                "quick_links": [],
                "campaign_links": []
            }
            
            # –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ö–µ–¥–µ—Ä–µ
            gender_links = self.driver.find_elements(By.CSS_SELECTOR, "nav a[href*='gender=']")
            for link in gender_links:
                category_info = {
                    "text": link.text,
                    "href": link.get_attribute('href'),
                    "css_selector": self._get_element_selector(link),
                    "is_active": 'active' in link.get_attribute('class') or '',
                    "gender": self._extract_gender_from_url(link.get_attribute('href'))
                }
                categories_found["gender_categories"].append(category_info)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Luxury, Clothing, etc.)
            main_category_selectors = [
                "[id*='gtm-category-navigation']",
                ".category-link",
                "nav[class*='category'] a"
            ]
            
            for selector in main_category_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for elem in elements:
                        if elem.text.strip():
                            category_info = {
                                "text": elem.text,
                                "href": elem.get_attribute('href'),
                                "id": elem.get_attribute('id'),
                                "classes": elem.get_attribute('class'),
                                "css_selector": self._get_element_selector(elem)
                            }
                            categories_found["main_categories"].append(category_info)
                except:
                    continue
            
            # –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
            quick_links = self.driver.find_elements(By.CSS_SELECTOR, ".category-quick-link a")
            for link in quick_links:
                if link.text.strip():
                    quick_link_info = {
                        "text": link.text,
                        "href": link.get_attribute('href'),
                        "css_selector": self._get_element_selector(link)
                    }
                    categories_found["quick_links"].append(quick_link_info)
            
            # –ö–∞–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–º–æ
            campaign_links = self.driver.find_elements(By.CSS_SELECTOR, ".campaign-link")
            for link in campaign_links:
                if link.text.strip():
                    campaign_info = {
                        "text": link.text[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                        "href": link.get_attribute('href'),
                        "css_selector": self._get_element_selector(link)
                    }
                    categories_found["campaign_links"].append(campaign_info)
            
            self.exploration_results["all_categories"] = categories_found
            
            total_categories = (len(categories_found["gender_categories"]) + 
                              len(categories_found["main_categories"]) + 
                              len(categories_found["quick_links"]) + 
                              len(categories_found["campaign_links"]))
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
            self.logger.info(f"   - –ì–µ–Ω–¥–µ—Ä–Ω—ã—Ö: {len(categories_found['gender_categories'])}")
            self.logger.info(f"   - –û—Å–Ω–æ–≤–Ω—ã—Ö: {len(categories_found['main_categories'])}")
            self.logger.info(f"   - –ë—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫: {len(categories_found['quick_links'])}")
            self.logger.info(f"   - –ö–∞–º–ø–∞–Ω–∏–π: {len(categories_found['campaign_links'])}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
    
    def explore_filter_systems(self):
        """–ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.logger.info("üéØ –ò–ó–£–ß–ï–ù–ò–ï –°–ò–°–¢–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–ò...")
        
        filter_systems = {}
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        sections_to_explore = [
            ("Home", "#gtm-category-navigation-WOMEN_NEW_1"),
            ("Luxury", "#gtm-category-navigation-WOMEN_LUXURY_2"), 
            ("Clothing", "#gtm-category-navigation-WOMEN_CLOTHING_3"),
            ("Shoes", "#gtm-category-navigation-WOMEN_SHOES_4")
        ]
        
        for section_name, selector in sections_to_explore:
            try:
                self.logger.info(f"üîç –ò–∑—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ: {section_name}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª
                element = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                element.click()
                time.sleep(5)
                
                # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filter_elements = self._find_all_filter_elements()
                filter_systems[section_name] = filter_elements
                
                self.logger.info(f"‚úÖ {section_name}: –Ω–∞–π–¥–µ–Ω–æ {len(filter_elements)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ {section_name}: {e}")
        
        self.exploration_results["filter_systems"] = filter_systems
    
    def _find_all_filter_elements(self):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        filter_elements = []
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_selectors = [
            # Dropdown —Ñ–∏–ª—å—Ç—Ä—ã
            "[class*='filter-dropdown']",
            "[class*='dropdown']",
            "select",
            
            # Checkbox —Ñ–∏–ª—å—Ç—Ä—ã  
            "input[type='checkbox']",
            "[class*='checkbox']",
            
            # Button —Ñ–∏–ª—å—Ç—Ä—ã
            "button[class*='filter']",
            "[data-filter]",
            
            # Range —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω–∞)
            "input[type='range']",
            "input[type='number']",
            "[class*='price']",
            "[class*='range']",
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è BestSecret
            "[id*='v1-0-']",
            ".filter-dropdown__button-label__text",
            ".plp__left-navigation-container",
            "[class*='navigation-container']"
        ]
        
        for selector in filter_selectors:
            try:
                elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                for elem in elements:
                    if elem.is_displayed():
                        filter_info = {
                            "selector": selector,
                            "id": elem.get_attribute('id'),
                            "classes": elem.get_attribute('class'),
                            "text": elem.text.strip()[:50],
                            "tag": elem.tag_name,
                            "type": elem.get_attribute('type'),
                            "css_path": self._get_element_selector(elem),
                            "is_clickable": elem.is_enabled()
                        }
                        filter_elements.append(filter_info)
            except:
                continue
        
        return filter_elements
    
    def deep_explore_products(self):
        """–ì–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤"""
        self.logger.info("üõçÔ∏è –ì–õ–£–ë–û–ö–û–ï –ò–ó–£–ß–ï–ù–ò–ï –°–¢–†–ê–ù–ò–¶ –¢–û–í–ê–†–û–í...")
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            product_links = self.driver.find_elements(By.CSS_SELECTOR, 'a[href*="/product/"]')[:5]
            
            product_analyses = []
            
            for i, product_link in enumerate(product_links, 1):
                product_url = product_link.get_attribute('href')
                self.logger.info(f"üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä {i}: {product_url}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
                self.driver.get(product_url)
                time.sleep(5)
                
                # –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
                product_analysis = self._deep_analyze_product_page()
                product_analysis["url"] = product_url
                product_analyses.append(product_analysis)
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏–∑—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                size_analysis = self._deep_analyze_sizes()
                product_analysis["size_analysis"] = size_analysis
            
            self.exploration_results["product_page_analysis"] = product_analyses
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def _deep_analyze_product_page(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        analysis = {
            "page_title": self.driver.title,
            "current_url": self.driver.current_url,
            "all_elements": {},
            "interactive_elements": {},
            "data_attributes": {},
            "scripts": []
        }
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_elements = self.driver.find_elements(By.XPATH, "//*")
            
            element_types = {}
            for elem in all_elements:
                tag = elem.tag_name
                element_types[tag] = element_types.get(tag, 0) + 1
            
            analysis["all_elements"] = element_types
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            interactive_selectors = ['button', 'input', 'select', 'a[href]', '[onclick]', '[data-testid]']
            for selector in interactive_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    interactive_info = []
                    
                    for elem in elements[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        elem_info = {
                            "tag": elem.tag_name,
                            "text": elem.text.strip()[:30],
                            "id": elem.get_attribute('id'),
                            "classes": elem.get_attribute('class'),
                            "data_attributes": self._get_data_attributes(elem)
                        }
                        interactive_info.append(elem_info)
                    
                    analysis["interactive_elements"][selector] = interactive_info
                except:
                    continue
            
            # JavaScript —Å–∫—Ä–∏–ø—Ç—ã
            try:
                scripts = self.driver.find_elements(By.TAG_NAME, "script")
                script_info = []
                for script in scripts[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å–∫—Ä–∏–ø—Ç–æ–≤
                    src = script.get_attribute('src')
                    if src:
                        script_info.append({"src": src})
                    else:
                        content = script.get_attribute('innerHTML')
                        if content and len(content) < 200:
                            script_info.append({"inline": content[:100]})
                
                analysis["scripts"] = script_info
            except:
                pass
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {e}")
        
        return analysis
    
    def _deep_analyze_sizes(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤"""
        self.logger.info("üìè –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í...")
        
        size_analysis = {
            "size_button_analysis": [],
            "size_options_analysis": [],
            "size_interaction_methods": [],
            "html_structure": "",
            "javascript_events": []
        }
        
        try:
            # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
            size_related_selectors = [
                "*[id*='size']",
                "*[class*='size']", 
                "*[data-size]",
                "*[aria-label*='size']",
                "button:contains('Size')",
                "button:contains('Select')",
                ".option-size",
                "#size-options",
                "#size-selector-button"
            ]
            
            for selector in size_related_selectors:
                try:
                    if 'contains' in selector:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                        xpath = f"//*[contains(text(), 'Size') or contains(text(), 'Select')]"
                        elements = self.driver.find_elements(By.XPATH, xpath)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for elem in elements:
                        if elem.is_displayed():
                            elem_info = {
                                "selector_used": selector,
                                "tag": elem.tag_name,
                                "id": elem.get_attribute('id'),
                                "classes": elem.get_attribute('class'),
                                "text": elem.text.strip(),
                                "html": elem.get_attribute('outerHTML')[:200],
                                "data_attributes": self._get_data_attributes(elem),
                                "css_path": self._get_element_selector(elem),
                                "is_clickable": elem.is_enabled(),
                                "location": elem.location,
                                "size": elem.size
                            }
                            
                            if 'button' in selector or elem.tag_name == 'button':
                                size_analysis["size_button_analysis"].append(elem_info)
                            else:
                                size_analysis["size_options_analysis"].append(elem_info)
                
                except Exception as e:
                    self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                    continue
            
            # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
            for button_info in size_analysis["size_button_analysis"]:
                try:
                    self.logger.info(f"üñ±Ô∏è –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å: {button_info['css_path']}")
                    
                    element = self.driver.find_element(By.CSS_SELECTOR, button_info['css_path'])
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–ª–∏–∫–∞
                    before_click = len(self.driver.find_elements(By.CSS_SELECTOR, "*"))
                    
                    # –ö–ª–∏–∫–∞–µ–º
                    self.driver.execute_script("arguments[0].click();", element)
                    time.sleep(2)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                    after_click = len(self.driver.find_elements(By.CSS_SELECTOR, "*"))
                    
                    # –ò—â–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤
                    new_size_elements = []
                    size_option_selectors = [
                        "#size-options *",
                        "*[class*='option']",
                        "*[class*='size-item']",
                        ".size-list *"
                    ]
                    
                    for opt_selector in size_option_selectors:
                        try:
                            options = self.driver.find_elements(By.CSS_SELECTOR, opt_selector)
                            for opt in options:
                                if opt.is_displayed() and opt.text.strip():
                                    opt_info = {
                                        "text": opt.text.strip(),
                                        "tag": opt.tag_name,
                                        "classes": opt.get_attribute('class'),
                                        "css_path": self._get_element_selector(opt),
                                        "html": opt.get_attribute('outerHTML')[:100]
                                    }
                                    new_size_elements.append(opt_info)
                        except:
                            continue
                    
                    interaction_result = {
                        "button_clicked": button_info['css_path'],
                        "elements_before": before_click,
                        "elements_after": after_click,
                        "new_size_elements": new_size_elements,
                        "success": len(new_size_elements) > 0
                    }
                    
                    size_analysis["size_interaction_methods"].append(interaction_result)
                    
                    if len(new_size_elements) > 0:
                        self.logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù–´ –†–ê–ó–ú–ï–†–´! –ö–Ω–æ–ø–∫–∞: {button_info['css_path']}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(new_size_elements)}")
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑–º–µ—Ä–æ–≤
                        try:
                            size_container = self.driver.find_element(By.CSS_SELECTOR, "#size-options")
                            size_analysis["html_structure"] = size_container.get_attribute('outerHTML')
                        except:
                            pass
                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π —Å–ø–æ—Å–æ–±, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    
                except Exception as e:
                    self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å {button_info.get('css_path', 'unknown')}: {e}")
                    continue
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
        
        return size_analysis
    
    def _get_data_attributes(self, element):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        data_attrs = {}
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —á–µ—Ä–µ–∑ JavaScript
            attrs = self.driver.execute_script("""
                var items = {};
                for (var i = 0; i < arguments[0].attributes.length; i++) {
                    var attr = arguments[0].attributes[i];
                    if (attr.name.startsWith('data-')) {
                        items[attr.name] = attr.value;
                    }
                }
                return items;
            """, element)
            return attrs
        except:
            return {}
    
    def _get_element_selector(self, element):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            return self.driver.execute_script("""
                function getPath(element) {
                    if (element.id !== '') {
                        return '#' + element.id;
                    }
                    if (element === document.body) {
                        return 'body';
                    }
                    
                    var ix = 0;
                    var siblings = element.parentNode.childNodes;
                    for (var i = 0; i < siblings.length; i++) {
                        var sibling = siblings[i];
                        if (sibling === element) {
                            return getPath(element.parentNode) + ' > ' + element.tagName + ':nth-child(' + (ix + 1) + ')';
                        }
                        if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
                            ix++;
                        }
                    }
                }
                return getPath(arguments[0]).toLowerCase();
            """, element)
        except:
            return "unknown"
    
    def _generate_css_path(self, element):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS –ø—É—Ç–∏ –¥–ª—è BeautifulSoup —ç–ª–µ–º–µ–Ω—Ç–∞"""
        path = []
        while element.parent:
            siblings = element.parent.find_all(element.name, recursive=False)
            if len(siblings) == 1:
                path.append(element.name)
            else:
                for i, sibling in enumerate(siblings, 1):
                    if sibling == element:
                        path.append(f"{element.name}:nth-child({i})")
                        break
            element = element.parent
        return " > ".join(reversed(path))
    
    def _extract_gender_from_url(self, url):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–∞ –∏–∑ URL"""
        if 'FEMALE' in url:
            return 'FEMALE'
        elif 'MALE' in url:
            return 'MALE'
        elif 'KIDS' in url:
            return 'KIDS'
        return 'UNKNOWN'
    
    def run_deep_exploration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        self.logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï BESTSECRET...")
        
        if not self.initialize_driver():
            return False
        
        if not self.login():
            return False
        
        try:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≥–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ
            self.deep_explore_header()
            self.explore_all_categories() 
            self.explore_filter_systems()
            self.deep_explore_products()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"deep_exploration_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.exploration_results, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
            self._print_detailed_summary()
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
    
    def _print_detailed_summary(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –ì–õ–£–ë–û–ö–û–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
        print("="*80)
        
        # –•–µ–¥–µ—Ä
        header_analysis = self.exploration_results.get("header_deep_analysis", {})
        if header_analysis:
            print(f"\nüè† –•–ï–î–ï–† –°–ê–ô–¢–ê:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {header_analysis.get('total_elements', 0)}")
            print(f"   ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(header_analysis.get('navigation_elements', []))}")
            print(f"   ‚Ä¢ –°—Å—ã–ª–æ–∫: {len(header_analysis.get('all_links', []))}")
            print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(header_analysis.get('interactive_elements', []))}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.exploration_results.get("all_categories", {})
        if categories:
            print(f"\nüóÇÔ∏è –ö–ê–¢–ï–ì–û–†–ò–ò:")
            print(f"   ‚Ä¢ –ì–µ–Ω–¥–µ—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories.get('gender_categories', []))}")
            print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories.get('main_categories', []))}")
            print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫: {len(categories.get('quick_links', []))}")
            print(f"   ‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π: {len(categories.get('campaign_links', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat in categories.get('gender_categories', [])[:3]:
                print(f"     - {cat.get('text', 'N/A')} ‚Üí {cat.get('gender', 'N/A')}")
        
        # –§–∏–ª—å—Ç—Ä—ã
        filters = self.exploration_results.get("filter_systems", {})
        if filters:
            print(f"\nüéØ –°–ò–°–¢–ï–ú–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
            for section, filter_list in filters.items():
                print(f"   ‚Ä¢ {section}: {len(filter_list)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
        # –¢–æ–≤–∞—Ä—ã –∏ —Ä–∞–∑–º–µ—Ä—ã
        products = self.exploration_results.get("product_page_analysis", [])
        if products:
            print(f"\nüõçÔ∏è –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í:")
            print(f"   ‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
            size_methods_found = 0
            successful_size_extractions = 0
            
            for product in products:
                size_analysis = product.get("size_analysis", {})
                interaction_methods = size_analysis.get("size_interaction_methods", [])
                
                size_methods_found += len(interaction_methods)
                successful_size_extractions += len([m for m in interaction_methods if m.get("success")])
            
            print(f"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {size_methods_found}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤: {successful_size_extractions}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            for product in products:
                size_analysis = product.get("size_analysis", {})
                for method in size_analysis.get("size_interaction_methods", []):
                    if method.get("success"):
                        print(f"   ‚úÖ –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î: {method.get('button_clicked')}")
                        print(f"      –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(method.get('new_size_elements', []))}")
                        for size_elem in method.get('new_size_elements', [])[:3]:
                            print(f"      - –†–∞–∑–º–µ—Ä: '{size_elem.get('text')}' (CSS: {size_elem.get('css_path', 'N/A')[:50]})")
        
        print("="*80)

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    try:
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
            email_match = re.search(r'BESTSECRET_EMAIL=(.+)', env_content)
            password_match = re.search(r'BESTSECRET_PASSWORD=(.+)', env_content)
            
            EMAIL = email_match.group(1) if email_match else None
            PASSWORD = password_match.group(1) if password_match else None
    except:
        EMAIL = "akinitovfilipp@gmail.com"
        PASSWORD = "Kaluga40"
    
    explorer = DeepBestSecretExplorer(EMAIL, PASSWORD)
    explorer.run_deep_exploration()

if __name__ == "__main__":
    main()