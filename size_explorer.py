#!/usr/bin/env python3
"""
BestSecret Size Explorer - –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup
import re

class SizeExplorer:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤ BestSecret"""
    
    def __init__(self, email: str, password: str):
        self.email = email
        self.password = password
        self.driver = None
        self.is_logged_in = False
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        self.size_results = {
            "timestamp": datetime.now().isoformat(),
            "successful_methods": [],
            "failed_methods": [],
            "size_patterns": [],
            "product_analyses": [],
            "best_selectors": []
        }
        
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
    
    def initialize_driver(self) -> bool:
        try:
            options = Options()
            options.add_argument("--window-size=1400,900")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def login(self) -> bool:
        try:
            self.driver.get("https://www.bestsecret.com/entrance/index.htm")
            time.sleep(5)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
            try:
                cookie_btn = WebDriverWait(self.driver, 3).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button[data-v-62969886]"))
                )
                cookie_btn.click()
                time.sleep(2)
            except:
                pass
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            try:
                login_btn = WebDriverWait(self.driver, 15).until(
                    EC.element_to_be_clickable((By.ID, "login-button"))
                )
                self.driver.execute_script("arguments[0].click();", login_btn)
            except:
                self.driver.get("https://login.bestsecret.com")
            
            time.sleep(5)
            
            username_field = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = self.driver.find_element(By.ID, "password")
            
            username_field.clear()
            username_field.send_keys(self.email)
            password_field.clear()
            password_field.send_keys(self.password)
            
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'LOGIN')]")
            login_button.click()
            
            time.sleep(10)
            
            current_url = self.driver.current_url
            if "bestsecret.com" in current_url and "login." not in current_url:
                self.is_logged_in = True
                self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. URL: {current_url}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def explore_sizes_intensively(self):
        """–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—Ä–æ–≤"""
        self.logger.info("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ò–ù–¢–ï–ù–°–ò–í–ù–û–ï –ò–ó–£–ß–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–í...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Luxury —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        try:
            luxury_link = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#gtm-category-navigation-WOMEN_LUXURY_2"))
            )
            luxury_link.click()
            time.sleep(5)
        except:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ Luxury, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        product_links = self.driver.find_elements(By.CSS_SELECTOR, 'a[href*="/product/"]')[:10]
        
        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(product_links)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        for i, product_link in enumerate(product_links, 1):
            try:
                product_url = product_link.get_attribute('href')
                self.logger.info(f"üì¶ –¢–û–í–ê–† {i}/10: {product_url}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
                self.driver.get(product_url)
                time.sleep(4)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                product_analysis = self._analyze_product_sizes(product_url)
                self.size_results["product_analyses"].append(product_analysis)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
                if product_analysis.get("successful_extractions"):
                    for method in product_analysis["successful_extractions"]:
                        self.size_results["successful_methods"].append(method)
                        self.logger.info(f"‚úÖ –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î –ù–ê–ô–î–ï–ù: {method.get('method_description')}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
                continue
    
    def _analyze_product_sizes(self, product_url: str) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        analysis = {
            "url": product_url,
            "page_title": self.driver.title,
            "size_buttons_found": [],
            "size_options_found": [],
            "interaction_attempts": [],
            "successful_extractions": [],
            "html_snapshots": {}
        }
        
        self.logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤...")
        
        # –ú–∞—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
        size_search_strategies = [
            # ID-based selectors
            {"name": "size-selector-button", "selector": "#size-selector-button", "type": "id"},
            {"name": "size-options", "selector": "#size-options", "type": "id"},
            {"name": "size-dropdown", "selector": "#size-dropdown", "type": "id"},
            
            # Class-based selectors
            {"name": "size-selector", "selector": ".size-selector", "type": "class"},
            {"name": "size-button", "selector": ".size-button", "type": "class"},
            {"name": "size-option", "selector": ".size-option", "type": "class"},
            {"name": "option-size", "selector": ".option-size", "type": "class"},
            {"name": "product-size", "selector": ".product-size", "type": "class"},
            
            # Attribute-based selectors
            {"name": "data-size", "selector": "[data-size]", "type": "attribute"},
            {"name": "data-testid-size", "selector": "[data-testid*='size']", "type": "attribute"},
            
            # Text-based search (XPath)
            {"name": "button-text-size", "selector": "//button[contains(text(), 'Size')]", "type": "xpath"},
            {"name": "button-text-select", "selector": "//button[contains(text(), 'Select')]", "type": "xpath"},
            {"name": "span-text-size", "selector": "//span[contains(text(), 'Size')]", "type": "xpath"},
            
            # Combination selectors
            {"name": "button-size-class", "selector": "button[class*='size']", "type": "combo"},
            {"name": "div-size-class", "selector": "div[class*='size']", "type": "combo"},
            {"name": "span-size-class", "selector": "span[class*='size']", "type": "combo"}
        ]
        
        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for strategy in size_search_strategies:
            try:
                if strategy["type"] == "xpath":
                    elements = self.driver.find_elements(By.XPATH, strategy["selector"])
                else:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, strategy["selector"])
                
                if elements:
                    self.logger.info(f"   üéØ {strategy['name']}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for elem in elements:
                        if elem.is_displayed():
                            elem_info = {
                                "strategy": strategy["name"],
                                "selector": strategy["selector"],
                                "tag": elem.tag_name,
                                "text": elem.text.strip()[:50],
                                "id": elem.get_attribute('id'),
                                "classes": elem.get_attribute('class'),
                                "html": elem.get_attribute('outerHTML')[:200],
                                "location": elem.location,
                                "size": elem.size,
                                "is_clickable": elem.is_enabled()
                            }
                            
                            if elem.tag_name == 'button' or 'button' in strategy["name"]:
                                analysis["size_buttons_found"].append(elem_info)
                            else:
                                analysis["size_options_found"].append(elem_info)
                            
            except Exception as e:
                self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy['name']} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        self.logger.info("üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏...")
        
        for button_info in analysis["size_buttons_found"]:
            interaction_result = self._test_size_interaction(button_info)
            analysis["interaction_attempts"].append(interaction_result)
            
            if interaction_result.get("success"):
                analysis["successful_extractions"].append(interaction_result)
        
        # –î–µ–ª–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            analysis["html_snapshots"]["full_page"] = self.driver.page_source[:5000]  # –ü–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        except:
            pass
        
        return analysis
    
    def _test_size_interaction(self, button_info: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤"""
        interaction_result = {
            "button_info": button_info,
            "method_description": f"–ö–ª–∏–∫ –ø–æ {button_info['strategy']} ({button_info['selector']})",
            "success": False,
            "extracted_sizes": [],
            "html_before": "",
            "html_after": "",
            "error": None
        }
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            try:
                size_container = self.driver.find_element(By.CSS_SELECTOR, "#size-options")
                interaction_result["html_before"] = size_container.get_attribute('outerHTML')[:500]
            except:
                pass
            
            # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞
            if button_info["selector"].startswith("//"):
                element = self.driver.find_element(By.XPATH, button_info["selector"])
            else:
                element = self.driver.find_element(By.CSS_SELECTOR, button_info["selector"])
            
            # –ö–ª–∏–∫–∞–µ–º
            self.driver.execute_script("arguments[0].click();", element)
            time.sleep(2)
            
            # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            extracted_sizes = self._extract_sizes_after_interaction()
            
            if extracted_sizes:
                interaction_result["success"] = True
                interaction_result["extracted_sizes"] = extracted_sizes
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                try:
                    size_container = self.driver.find_element(By.CSS_SELECTOR, "#size-options")
                    interaction_result["html_after"] = size_container.get_attribute('outerHTML')[:500]
                except:
                    pass
                
                self.logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_sizes)} —Ä–∞–∑–º–µ—Ä–æ–≤")
            else:
                interaction_result["success"] = False
                self.logger.debug(f"‚ùå –†–∞–∑–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ {button_info['strategy']}")
            
        except Exception as e:
            interaction_result["error"] = str(e)
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å {button_info['strategy']}: {e}")
        
        return interaction_result
    
    def _extract_sizes_after_interaction(self) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        extracted_sizes = []
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        extraction_strategies = [
            # –í–∞—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            {"name": "original_1", "selector": "#size-options > div > span.option-size"},
            {"name": "original_2", "selector": "#size-options > div:nth-child(2) > span.option-size"},
            {"name": "original_3", "selector": "#size-options > div:nth-child(4)"},
            
            # –ë–æ–ª–µ–µ –æ–±—â–∏–µ
            {"name": "size_options_all", "selector": "#size-options *"},
            {"name": "size_options_divs", "selector": "#size-options div"},
            {"name": "size_options_spans", "selector": "#size-options span"},
            
            # –ü–æ –∫–ª–∞—Å—Å–∞–º
            {"name": "option_size_class", "selector": ".option-size"},
            {"name": "size_item_class", "selector": ".size-item"},
            {"name": "size_value_class", "selector": ".size-value"},
            
            # –ü–æ —Ç–µ–≥–∞–º –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
            {"name": "any_with_size_attr", "selector": "*[data-size]"},
            {"name": "clickable_sizes", "selector": "#size-options [onclick], #size-options button"},
        ]
        
        for strategy in extraction_strategies:
            try:
                elements = self.driver.find_elements(By.CSS_SELECTOR, strategy["selector"])
                
                for elem in elements:
                    if elem.is_displayed():
                        size_text = elem.text.strip()
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                        if (size_text and 
                            size_text not in ['Size', 'Select Size', 'Choose Size', 'Sizes'] and
                            len(size_text) <= 15 and  # –†–∞–∑–º–µ—Ä—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ
                            not any(word in size_text.lower() for word in ['select', 'choose', 'available'])):
                            
                            size_info = {
                                "text": size_text,
                                "strategy": strategy["name"],
                                "selector": strategy["selector"],
                                "tag": elem.tag_name,
                                "classes": elem.get_attribute('class'),
                                "id": elem.get_attribute('id'),
                                "is_enabled": elem.is_enabled(),
                                "css_path": self._get_element_path(elem)
                            }
                            
                            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            if not any(existing["text"] == size_text for existing in extracted_sizes):
                                extracted_sizes.append(size_info)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                if extracted_sizes:
                    self.logger.info(f"üìè –†–∞–∑–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {strategy['name']}")
                    break
                    
            except Exception as e:
                self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy['name']} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        return extracted_sizes
    
    def _get_element_path(self, element):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSS –ø—É—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            return self.driver.execute_script("""
                function getPath(element) {
                    if (element.id !== '') {
                        return '#' + element.id;
                    }
                    if (element === document.body) {
                        return 'body';
                    }
                    
                    var ix = 0;
                    var siblings = element.parentNode.childNodes;
                    for (var i = 0; i < siblings.length; i++) {
                        var sibling = siblings[i];
                        if (sibling === element) {
                            return getPath(element.parentNode) + ' > ' + element.tagName + ':nth-child(' + (ix + 1) + ')';
                        }
                        if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
                            ix++;
                        }
                    }
                }
                return getPath(arguments[0]).toLowerCase();
            """, element)
        except:
            return "unknown"
    
    def run_size_exploration(self):
        """–ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤"""
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –†–ê–ó–ú–ï–†–û–í BESTSECRET...")
        
        if not self.initialize_driver():
            return False
        
        if not self.login():
            return False
        
        try:
            self.explore_sizes_intensively()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._analyze_results()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"size_exploration_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.size_results, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ê–ó–ú–ï–†–û–í –ó–ê–í–ï–†–®–ï–ù–û! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            self._print_size_summary()
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
    
    def _analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
        successful_methods = self.size_results["successful_methods"]
        
        if successful_methods:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_success = {}
            
            for method in successful_methods:
                strategy = method["button_info"]["strategy"]
                if strategy not in strategy_success:
                    strategy_success[strategy] = []
                strategy_success[strategy].append(method)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            best_strategies = sorted(strategy_success.items(), 
                                   key=lambda x: len(x[1]), reverse=True)
            
            for strategy, methods in best_strategies:
                avg_sizes = sum(len(m["extracted_sizes"]) for m in methods) / len(methods)
                
                best_selector_info = {
                    "strategy_name": strategy,
                    "success_count": len(methods),
                    "average_sizes_found": avg_sizes,
                    "selector": methods[0]["button_info"]["selector"],
                    "example_sizes": [size["text"] for size in methods[0]["extracted_sizes"][:5]]
                }
                
                self.size_results["best_selectors"].append(best_selector_info)
    
    def _print_size_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º"""
        print("\n" + "="*70)
        print("üìè –°–í–û–î–ö–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –†–ê–ó–ú–ï–†–û–í")
        print("="*70)
        
        total_products = len(self.size_results["product_analyses"])
        successful_products = len([p for p in self.size_results["product_analyses"] 
                                  if p.get("successful_extractions")])
        
        print(f"\nüì¶ –¢–û–í–ê–†–´:")
        print(f"   ‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   ‚Ä¢ –° —É—Å–ø–µ—à–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–æ–≤: {successful_products}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_products/total_products*100:.1f}%")
        
        if self.size_results["successful_methods"]:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–´–ï –ú–ï–¢–û–î–´: {len(self.size_results['successful_methods'])}")
            
            for method in self.size_results["successful_methods"][:3]:
                strategy = method["button_info"]["strategy"]
                selector = method["button_info"]["selector"]
                sizes_count = len(method["extracted_sizes"])
                
                print(f"   üéØ {strategy}: {selector}")
                print(f"      –†–∞–∑–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {sizes_count}")
                
                example_sizes = [size["text"] for size in method["extracted_sizes"][:5]]
                print(f"      –ü—Ä–∏–º–µ—Ä—ã: {', '.join(example_sizes)}")
        
        if self.size_results["best_selectors"]:
            print(f"\nüèÜ –õ–£–ß–®–ò–ï –°–ï–õ–ï–ö–¢–û–†–´:")
            
            for best in self.size_results["best_selectors"][:3]:
                print(f"   {best['strategy_name']}: {best['selector']}")
                print(f"      –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {best['success_count']}")
                print(f"      –°—Ä–µ–¥–Ω–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑: {best['average_sizes_found']:.1f}")
                print(f"      –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤: {', '.join(best['example_sizes'])}")
        
        print("="*70)

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    try:
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
            email_match = re.search(r'BESTSECRET_EMAIL=(.+)', env_content)
            password_match = re.search(r'BESTSECRET_PASSWORD=(.+)', env_content)
            
            EMAIL = email_match.group(1) if email_match else None
            PASSWORD = password_match.group(1) if password_match else None
    except:
        EMAIL = "akinitovfilipp@gmail.com"
        PASSWORD = "Kaluga40"
    
    explorer = SizeExplorer(EMAIL, PASSWORD)
    explorer.run_size_exploration()

if __name__ == "__main__":
    main()