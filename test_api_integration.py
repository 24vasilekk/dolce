#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö BestSecret –≤ —Ñ–æ—Ä–º–∞—Ç Dolce
"""

import json
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ API —Å–µ—Ä–≤–µ—Ä–∞
sys.path.append('.')
from dolce_api_server import DataConverter

def test_data_conversion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–ï–°–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –î–ê–ù–ù–´–• BestSecret ‚Üí Dolce")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    if not os.path.exists('products_database.json'):
        print("‚ùå –§–∞–π–ª products_database.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–µ—Ä: python3 bestsecret_parser.py")
        return False
    
    with open('products_database.json', 'r', encoding='utf-8') as f:
        bestsecret_products = json.load(f)
    
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bestsecret_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ BestSecret")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = DataConverter()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    dolce_products = converter.convert_bestsecret_to_dolce(bestsecret_products)
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(dolce_products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Dolce")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    print("\nüìä –ê–ù–ê–õ–ò–ó –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
    print("-" * 40)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É
    gender_stats = {}
    category_stats = {}
    brand_stats = {}
    price_stats = []
    
    for product in dolce_products:
        # –ü–æ –ø–æ–ª—É
        gender = product['gender']
        gender_stats[gender] = gender_stats.get(gender, 0) + 1
        
        # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = product['category']
        category_stats[category] = category_stats.get(category, 0) + 1
        
        # –ü–æ –±—Ä–µ–Ω–¥—É
        brand = product['brand']
        brand_stats[brand] = brand_stats.get(brand, 0) + 1
        
        # –¶–µ–Ω—ã
        price_stats.append(product['price'])
    
    print(f"üë´ –ü–æ –ø–æ–ª—É:")
    for gender, count in gender_stats.items():
        print(f"   {gender}: {count}")
    
    print(f"üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count in category_stats.items():
        print(f"   {category}: {count}")
    
    print(f"üè∑Ô∏è –ü–æ –±—Ä–µ–Ω–¥–∞–º:")
    for brand, count in brand_stats.items():
        print(f"   {brand}: {count}")
    
    if price_stats:
        avg_price = sum(price_stats) / len(price_stats)
        print(f"üí∞ –¶–µ–Ω—ã:")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(price_stats):,.0f} ‚ÇΩ")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(price_stats):,.0f} ‚ÇΩ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
    print("\nüõçÔ∏è –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í:")
    print("-" * 40)
    
    for i, product in enumerate(dolce_products[:3]):
        print(f"\n{i+1}. {product['name']} by {product['brand']}")
        print(f"   üí∞ {product['price']:,} ‚ÇΩ" + (f" (–±—ã–ª–æ {product.get('salePrice', product['price']):,} ‚ÇΩ)" if product.get('onSale') else ""))
        print(f"   üë§ {product['gender']} | üìÇ {product['category']} | üè∑Ô∏è {product['subcategory']}")
        print(f"   üé® –¶–≤–µ—Ç–∞: {', '.join(product['colors'])}")
        print(f"   üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(product['sizes'])}")
        print(f"   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {', '.join(product['materials'])}")
        print(f"   üîó {product.get('source_url', 'N/A')[:50]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with open('dolce_converted_products.json', 'w', encoding='utf-8') as f:
        json.dump(dolce_products, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: dolce_converted_products.json")
    
    return True

def validate_dolce_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º Dolce –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–ê–¢–ê DOLCE:")
    print("-" * 30)
    
    if not os.path.exists('dolce_converted_products.json'):
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    with open('dolce_converted_products.json', 'r', encoding='utf-8') as f:
        products = json.load(f)
    
    required_fields = ['id', 'name', 'brand', 'price', 'gender', 'category', 'colors', 'sizes']
    
    valid_count = 0
    for product in products:
        is_valid = True
        missing_fields = []
        
        for field in required_fields:
            if field not in product or not product[field]:
                is_valid = False
                missing_fields.append(field)
        
        if is_valid:
            valid_count += 1
        else:
            print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{product.get('name', 'N/A')}' –Ω–µ –≤–∞–ª–∏–¥–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
    
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {valid_count}/{len(products)} ({valid_count/len(products)*100:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    if products:
        sample = products[0]
        checks = [
            ("ID", isinstance(sample.get('id'), int)),
            ("–ù–∞–∑–≤–∞–Ω–∏–µ", isinstance(sample.get('name'), str) and len(sample.get('name', '')) > 0),
            ("–ë—Ä–µ–Ω–¥", isinstance(sample.get('brand'), str) and len(sample.get('brand', '')) > 0),
            ("–¶–µ–Ω–∞", isinstance(sample.get('price'), int) and sample.get('price', 0) > 0),
            ("–¶–≤–µ—Ç–∞", isinstance(sample.get('colors'), list) and len(sample.get('colors', [])) > 0),
            ("–†–∞–∑–º–µ—Ä—ã", isinstance(sample.get('sizes'), list) and len(sample.get('sizes', [])) > 0),
        ]
        
        for check_name, is_ok in checks:
            status = "‚úÖ" if is_ok else "‚ùå"
            print(f"   {status} {check_name}")
    
    return valid_count == len(products)

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò DOLCE x BESTSECRET")
    print("üåü" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    conversion_success = test_data_conversion()
    
    if not conversion_success:
        print("‚ùå –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!")
        return
    
    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    validation_success = validate_dolce_format()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "üéØ" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("üéØ" * 50)
    
    if conversion_success and validation_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –§–æ—Ä–º–∞—Ç Dolce –≤–∞–ª–∏–¥–µ–Ω")
        print("‚úÖ API –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É:")
        print("   python3 start_dolce_system.py")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô:")
        if not conversion_success:
            print("   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if not validation_success:
            print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–∞–ª–∏–¥–µ–Ω")
    
    print("üåü" * 50)

if __name__ == "__main__":
    main()