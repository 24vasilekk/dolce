#!/usr/bin/env python3
"""
BestSecret Site Explorer - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup
import re

class BestSecretExplorer:
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞ BestSecret"""
    
    def __init__(self, email: str, password: str):
        self.email = email
        self.password = password
        self.driver = None
        self.is_logged_in = False
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        self.exploration_results = {
            "timestamp": datetime.now().isoformat(),
            "header_structure": {},
            "navigation": {},
            "categories": {},
            "product_page": {},
            "filters": {},
            "size_selectors": [],
            "page_structures": {}
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
    
    def initialize_driver(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            options = Options()
            options.add_argument("--window-size=1400,900")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ BestSecret"""
        try:
            self.driver.get("https://www.bestsecret.com/entrance/index.htm")
            time.sleep(5)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ cookies
            self._handle_cookie_consent()
            
            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Login
            try:
                login_btn = WebDriverWait(self.driver, 15).until(
                    EC.element_to_be_clickable((By.ID, "login-button"))
                )
                self.driver.execute_script("arguments[0].click();", login_btn)
            except:
                self.driver.get("https://login.bestsecret.com")
            
            time.sleep(5)
            
            # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            username_field = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.ID, "username"))
            )
            password_field = self.driver.find_element(By.ID, "password")
            
            username_field.clear()
            username_field.send_keys(self.email)
            password_field.clear()
            password_field.send_keys(self.password)
            
            login_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'LOGIN')]")
            login_button.click()
            
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
            current_url = self.driver.current_url
            if "bestsecret.com" in current_url and "login." not in current_url:
                self.is_logged_in = True
                self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. URL: {current_url}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _handle_cookie_consent(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ cookies"""
        try:
            cookie_selectors = [
                "button[data-v-62969886]",
                ".cmp-overlay button", 
                "[data-testid='accept-cookies']"
            ]
            
            for selector in cookie_selectors:
                try:
                    cookie_btn = WebDriverWait(self.driver, 2).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    cookie_btn.click()
                    time.sleep(2)
                    return True
                except:
                    continue
        except:
            pass
        
        return False
    
    def explore_header_structure(self):
        """–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—ç–¥–µ—Ä–∞"""
        self.logger.info("üîç –ò–∑—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—ç–¥–µ—Ä–∞...")
        
        try:
            # –ò—â–µ–º —Ö—ç–¥–µ—Ä
            header_selectors = ["header", ".header", "#header", ".main-header", ".site-header"]
            
            for selector in header_selectors:
                try:
                    header = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if header:
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ö—ç–¥–µ—Ä: {selector}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—ç–¥–µ—Ä–∞
                        header_html = header.get_attribute('outerHTML')
                        soup = BeautifulSoup(header_html, 'html.parser')
                        
                        # –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        nav_elements = soup.find_all(['nav', 'div', 'ul'], class_=re.compile(r'nav|menu|category|gender'))
                        
                        self.exploration_results["header_structure"][selector] = {
                            "found": True,
                            "navigation_elements": []
                        }
                        
                        for nav in nav_elements:
                            nav_info = {
                                "tag": nav.name,
                                "classes": nav.get('class', []),
                                "id": nav.get('id'),
                                "children_count": len(nav.find_all(['a', 'button']))
                            }
                            self.exploration_results["header_structure"][selector]["navigation_elements"].append(nav_info)
                        
                        break
                        
                except NoSuchElementException:
                    continue
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            self.logger.info("üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ö—ç–¥–µ—Ä–µ...")
            
            category_patterns = [
                "–∂–µ–Ω—Å–∫", "–º—É–∂—Å–∫", "–¥–µ—Ç—Å–∫", "women", "men", "kids", "child", "female", "male"
            ]
            
            all_links = self.driver.find_elements(By.TAG_NAME, "a")
            category_links = []
            
            for link in all_links[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–µ—Ä–≤—ã–º–∏ 50 —Å—Å—ã–ª–∫–∞–º–∏
                try:
                    text = link.text.lower()
                    href = link.get_attribute('href') or ""
                    
                    for pattern in category_patterns:
                        if pattern in text or pattern in href.lower():
                            category_links.append({
                                "text": link.text,
                                "href": href,
                                "css_selector": self._generate_css_selector(link),
                                "classes": link.get_attribute('class')
                            })
                            break
                except:
                    continue
            
            self.exploration_results["categories"]["potential_category_links"] = category_links
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Ö—ç–¥–µ—Ä–∞: {e}")
    
    def explore_navigation_structure(self):
        """–ò–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        self.logger.info("üß≠ –ò–∑—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        try:
            # –ò—â–µ–º –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            nav_selectors = [
                "nav", ".navigation", ".nav", ".menu", ".category-nav", 
                "[class*='nav']", "[class*='menu']", "[class*='category']"
            ]
            
            found_navigations = []
            
            for selector in nav_selectors:
                try:
                    navs = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for nav in navs:
                        nav_info = {
                            "selector": selector,
                            "text_content": nav.text[:200],  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                            "id": nav.get_attribute('id'),
                            "classes": nav.get_attribute('class'),
                            "tag_name": nav.tag_name,
                            "children_count": len(nav.find_elements(By.XPATH, ".//*"))
                        }
                        
                        if nav_info not in found_navigations and nav.text.strip():
                            found_navigations.append(nav_info)
                            
                except:
                    continue
            
            self.exploration_results["navigation"]["found_elements"] = found_navigations
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
    
    def explore_product_page(self):
        """–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
        self.logger.info("üõçÔ∏è –ò–∑—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
            product_links = self.driver.find_elements(By.CSS_SELECTOR, 'a[href*="/product/"], a[href*="/artikel/"]')
            
            if product_links:
                product_url = product_links[0].get_attribute('href')
                self.logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞: {product_url}")
                
                self.driver.get(product_url)
                time.sleep(5)
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤
                self.logger.info("üìè –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤...")
                
                size_selectors_to_test = [
                    "#size-selector-button",
                    "#size-options",
                    "#size-options > div",
                    "#size-options > div > span.option-size",
                    "#size-options > div:nth-child(2) > span.option-size",
                    "#size-options > div:nth-child(4)",
                    ".size-option",
                    ".size-selector",
                    "[data-size]",
                    "button[class*='size']",
                    "span[class*='size']",
                    ".product-size",
                    ".sizes"
                ]
                
                found_size_elements = []
                
                for selector in size_selectors_to_test:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        
                        for i, elem in enumerate(elements):
                            if elem.is_displayed():
                                size_info = {
                                    "selector": selector,
                                    "index": i,
                                    "text": elem.text.strip(),
                                    "tag_name": elem.tag_name,
                                    "classes": elem.get_attribute('class'),
                                    "id": elem.get_attribute('id'),
                                    "visible": elem.is_displayed(),
                                    "clickable": elem.is_enabled()
                                }
                                found_size_elements.append(size_info)
                                
                    except Exception as e:
                        self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                
                self.exploration_results["product_page"]["size_elements"] = found_size_elements
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤
                try:
                    size_button = self.driver.find_element(By.CSS_SELECTOR, "#size-selector-button")
                    if size_button.is_displayed():
                        self.logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞...")
                        self.driver.execute_script("arguments[0].click();", size_button)
                        time.sleep(2)
                        
                        # –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –∏—â–µ–º –æ–ø—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
                        size_options = self.driver.find_elements(By.CSS_SELECTOR, "#size-options div")
                        size_options_info = []
                        
                        for i, option in enumerate(size_options):
                            if option.text.strip():
                                size_text_elem = option.find_elements(By.CSS_SELECTOR, "span.option-size")
                                option_info = {
                                    "index": i,
                                    "full_text": option.text.strip(),
                                    "size_text": size_text_elem[0].text.strip() if size_text_elem else "",
                                    "css_selector": f"#size-options > div:nth-child({i+1})",
                                    "size_span_selector": f"#size-options > div:nth-child({i+1}) > span.option-size",
                                    "classes": option.get_attribute('class')
                                }
                                size_options_info.append(option_info)
                        
                        self.exploration_results["product_page"]["size_options_after_click"] = size_options_info
                        
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
                
                # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
                product_elements = {
                    "title": ["h1", ".product-title", ".product-name", "[data-product-name]"],
                    "price": [".price", ".t-price", "[data-price]", ".product-price"],
                    "brand": [".brand", ".t-brand", "[data-brand]", ".product-brand"],
                    "color": [".color", "[data-color]", ".product-color"],
                    "images": ["img[src*='product']", ".product-image", ".gallery img"]
                }
                
                for element_type, selectors in product_elements.items():
                    found_elements = []
                    
                    for selector in selectors:
                        try:
                            elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            
                            for elem in elements:
                                if elem.is_displayed() and elem.text.strip():
                                    found_elements.append({
                                        "selector": selector,
                                        "text": elem.text.strip()[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                                        "tag": elem.tag_name
                                    })
                                    
                        except:
                            continue
                    
                    self.exploration_results["product_page"][element_type] = found_elements
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {e}")
    
    def explore_filters(self):
        """–ò–∑—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.logger.info("üéØ –ò–∑—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ luxury —Ä–∞–∑–¥–µ–ª
            try:
                luxury_link = self.driver.find_element(By.PARTIAL_LINK_TEXT, "Luxury")
                luxury_link.click()
                time.sleep(5)
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
                filter_selectors = [
                    "[class*='filter']",
                    "[id*='filter']", 
                    ".filter-dropdown",
                    "[class*='dropdown']",
                    "select",
                    "[role='button']"
                ]
                
                found_filters = []
                
                for selector in filter_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        
                        for elem in elements:
                            if elem.is_displayed():
                                filter_info = {
                                    "selector": selector,
                                    "id": elem.get_attribute('id'),
                                    "classes": elem.get_attribute('class'),
                                    "text": elem.text.strip()[:50],
                                    "tag": elem.tag_name
                                }
                                found_filters.append(filter_info)
                                
                    except:
                        continue
                
                self.exploration_results["filters"]["luxury_section"] = found_filters
                
            except:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª Luxury")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _generate_css_selector(self, element):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            return self.driver.execute_script("""
                function getCSSSelector(el) {
                    var names = [];
                    while (el.parentNode) {
                        if (el.id) {
                            names.unshift('#' + el.id);
                            break;
                        } else {
                            if (el == el.ownerDocument.documentElement) 
                                names.unshift(el.tagName);
                            else {
                                for (var c = 1, e = el; e.previousElementSibling; e = e.previousElementSibling, c++);
                                names.unshift(el.tagName + ":nth-child(" + c + ")");
                            }
                            el = el.parentNode;
                        }
                    }
                    return names.join(" > ");
                }
                return getCSSSelector(arguments[0]);
            """, element)
        except:
            return "unknown"
    
    def run_full_exploration(self):
        """–ü–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ BestSecret...")
        
        if not self.initialize_driver():
            return False
        
        if not self.login():
            return False
        
        try:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.explore_header_structure()
            self.explore_navigation_structure()
            self.explore_product_page()
            self.explore_filters()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"site_exploration_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.exploration_results, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            self.print_summary()
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return False
        
        finally:
            if self.driver:
                self.driver.quit()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if "potential_category_links" in self.exploration_results["categories"]:
            print(f"\nüè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.exploration_results['categories']['potential_category_links'])}")
            for link in self.exploration_results["categories"]["potential_category_links"][:5]:
                print(f"   ‚Ä¢ {link['text']} - {link['css_selector']}")
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤
        if "size_elements" in self.exploration_results["product_page"]:
            print(f"\nüìè –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(self.exploration_results['product_page']['size_elements'])}")
            for elem in self.exploration_results["product_page"]["size_elements"][:5]:
                print(f"   ‚Ä¢ {elem['selector']} - '{elem['text']}'")
        
        # –û–ø—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        if "size_options_after_click" in self.exploration_results["product_page"]:
            print(f"\nüéØ –û–ø—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {len(self.exploration_results['product_page']['size_options_after_click'])}")
            for option in self.exploration_results["product_page"]["size_options_after_click"][:5]:
                print(f"   ‚Ä¢ {option['size_span_selector']} - '{option['size_text']}'")
        
        # –§–∏–ª—å—Ç—Ä—ã
        if "luxury_section" in self.exploration_results["filters"]:
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ Luxury: {len(self.exploration_results['filters']['luxury_section'])}")
        
        print("="*60)

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
    try:
        with open('.env', 'r', encoding='utf-8') as f:
            env_content = f.read()
            email_match = re.search(r'BESTSECRET_EMAIL=(.+)', env_content)
            password_match = re.search(r'BESTSECRET_PASSWORD=(.+)', env_content)
            
            EMAIL = email_match.group(1) if email_match else None
            PASSWORD = password_match.group(1) if password_match else None
    except:
        EMAIL = "akinitovfilipp@gmail.com"
        PASSWORD = "Kaluga40"
    
    explorer = BestSecretExplorer(EMAIL, PASSWORD)
    explorer.run_full_exploration()

if __name__ == "__main__":
    main()