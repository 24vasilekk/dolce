#!/usr/bin/env python3
"""
üéõÔ∏è Dolce Deals - Admin API Server
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
"""

import os
import json
import hashlib
import secrets
from datetime import datetime, timedelta
from functools import wraps
from typing import Dict, List, Optional

from flask import Flask, request, jsonify, render_template_string, send_from_directory
from flask_cors import CORS
import psycopg2
from psycopg2.extras import RealDictCursor
import jwt
import bcrypt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here')
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get('DATABASE_URL', 'postgresql://admin:password@localhost:5432/dolcedeals')

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self, db_url: str):
        self.db_url = db_url
        self.connection = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(
                self.db_url,
                cursor_factory=RealDictCursor
            )
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def execute_query(self, query: str, params=None) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if not self.connection:
                if not self.connect():
                    return []
            
            with self.connection.cursor() as cursor:
                cursor.execute(query, params or ())
                return [dict(row) for row in cursor.fetchall()]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []
    
    def execute_command(self, query: str, params=None) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT/UPDATE/DELETE –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if not self.connection:
                if not self.connect():
                    return False
            
            with self.connection.cursor() as cursor:
                cursor.execute(query, params or ())
                self.connection.commit()
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            if self.connection:
                self.connection.rollback()
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
db = DatabaseManager(DATABASE_URL)

# –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è PostgreSQL
def load_products_from_json() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
    try:
        with open('products_database.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
            if isinstance(data, list):
                return data
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º products
            return data.get('products', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return []

def save_products_to_json(products: List[Dict]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open('products_database.json', 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def require_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}), 401
        
        try:
            if token.startswith('Bearer '):
                token = token[7:]
            
            payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
            request.current_admin = payload
        except jwt.ExpiredSignatureError:
            return jsonify({'error': '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'}), 401
        
        return f(*args, **kwargs)
    return decorated

def require_role(required_role: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    def decorator(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            admin_role = request.current_admin.get('role', 'admin')
            
            roles_hierarchy = {
                'super_admin': 3,
                'admin': 2,
                'moderator': 1
            }
            
            if roles_hierarchy.get(admin_role, 0) < roles_hierarchy.get(required_role, 0):
                return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'}), 403
            
            return f(*args, **kwargs)
        return decorated
    return decorator

# =============================================================================
# –ü–£–ë–õ–ò–ß–ù–û–ï API (–¥–ª—è Dolce –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
# =============================================================================

@app.route('/api/health')
def health_check():
    """Health check –¥–ª—è Railway –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_status = "connected" if db.connect() else "disconnected"
    
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    if db_status == "connected":
        products = db.execute_query("SELECT COUNT(*) as count FROM products WHERE status = 'active'")
        products_count = products[0]['count'] if products else 0
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        products = load_products_from_json()
        products_count = len(products)
    
    return jsonify({
        "status": "healthy",
        "service": "dolce-admin-api",
        "version": "2.0.0",
        "database": db_status,
        "products_loaded": products_count,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/api/products')
def get_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ PostgreSQL
        if db.connect():
            products = db.execute_query("""
                SELECT id, sku, name, brand, price, original_price, discount_percentage,
                       category, gender, sizes, colors, images, description, 
                       views_count, favorites_count, created_at
                FROM products 
                WHERE status = 'active'
                ORDER BY created_at DESC
            """)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Dolce –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            dolce_products = []
            for product in products:
                dolce_product = {
                    "id": product['id'],
                    "name": product['name'],
                    "brand": product['brand'],
                    "price": int(product['price']) if product['price'] else 0,
                    "originalPrice": int(product['original_price']) if product['original_price'] else 0,
                    "discount": f"{product['discount_percentage']}%" if product['discount_percentage'] else "0%",
                    "category": product['category'] or "–û–¥–µ–∂–¥–∞",
                    "color": product['colors'][0] if product['colors'] else "–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π",
                    "sizes": product['sizes'] or [],
                    "image": product['images'][0]['url'] if product['images'] else "",
                    "description": product['description'] or f"{product['brand']} {product['name']}",
                    "inStock": len(product['sizes'] or []) > 0
                }
                dolce_products.append(dolce_product)
            
            return jsonify(dolce_products)
        
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON
            products = load_products_from_json()
            return jsonify(convert_bestsecret_to_dolce(products))
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/products/<int:product_id>')
def get_product(product_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"""
    try:
        if db.connect():
            products = db.execute_query(
                "SELECT * FROM products WHERE id = %s AND status = 'active'",
                (product_id,)
            )
            if products:
                return jsonify(products[0])
        
        return jsonify({"error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/stats')
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if db.connect():
            stats = db.execute_query("""
                SELECT 
                    COUNT(*) as total_products,
                    COUNT(DISTINCT brand) as total_brands,
                    COUNT(DISTINCT category) as total_categories,
                    AVG(price) as avg_price,
                    COUNT(CASE WHEN status = 'active' THEN 1 END) as in_stock
                FROM products
            """)
            
            brands = db.execute_query("SELECT DISTINCT brand FROM products WHERE brand IS NOT NULL")
            categories = db.execute_query("SELECT DISTINCT category FROM products WHERE category IS NOT NULL")
            
            return jsonify({
                "total_products": int(stats[0]['total_products']),
                "brands": [b['brand'] for b in brands],
                "categories": [c['category'] for c in categories],
                "avg_price": int(stats[0]['avg_price']) if stats[0]['avg_price'] else 0,
                "in_stock": int(stats[0]['in_stock'])
            })
        
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ JSON
            products = load_products_from_json()
            return jsonify({
                "total_products": len(products),
                "brands": list(set(p.get('brand', 'Unknown') for p in products)),
                "categories": list(set(p.get('category', 'clothing') for p in products)),
                "avg_price": 50000,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                "in_stock": len(products)
            })
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# =============================================================================
# –ê–î–ú–ò–ù API (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
# =============================================================================

@app.route('/admin/login', methods=['POST'])
def admin_login():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')
        
        if not username or not password:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'}), 400
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑ –ë–î (–¥–ª—è –¥–µ–º–æ)
        if username == 'admin' and password == 'admin123':
            token = jwt.encode({
                'username': username,
                'role': 'super_admin',
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'], algorithm='HS256')
            
            return jsonify({
                'token': token,
                'user': {
                    'username': username,
                    'role': 'super_admin',
                    'full_name': 'System Administrator'
                }
            })
        
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}), 401
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/admin/dashboard')
@require_auth
def admin_dashboard():
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        if db.connect():
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            products_stats = db.execute_query("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'active' THEN 1 END) as active,
                    COUNT(CASE WHEN status = 'inactive' THEN 1 END) as inactive,
                    COUNT(CASE WHEN created_at >= CURRENT_DATE THEN 1 END) as today
                FROM products
            """)[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            parsing_logs = db.execute_query("""
                SELECT source, status, products_found, started_at, completed_at
                FROM parsing_logs 
                ORDER BY started_at DESC 
                LIMIT 10
            """)
            
            # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤
            top_brands = db.execute_query("""
                SELECT brand, COUNT(*) as count
                FROM products 
                WHERE brand IS NOT NULL
                GROUP BY brand 
                ORDER BY count DESC 
                LIMIT 10
            """)
        else:
            # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            products_stats = {"total": 6, "active": 6, "inactive": 0, "today": 0}
            parsing_logs = []
            top_brands = [
                {"brand": "Gucci", "count": 2},
                {"brand": "Off-White", "count": 1},
                {"brand": "Canada Goose", "count": 1}
            ]
        
        return jsonify({
            "products_stats": products_stats,
            "parsing_logs": parsing_logs,
            "top_brands": top_brands,
            "system_info": {
                "database": "connected" if db.connection else "json_fallback",
                "version": "2.0.0"
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/admin/products')
@require_auth  
def admin_get_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    try:
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 20))
        offset = (page - 1) * limit
        
        if db.connect():
            products = db.execute_query(f"""
                SELECT * FROM products 
                ORDER BY created_at DESC 
                LIMIT {limit} OFFSET {offset}
            """)
            
            total = db.execute_query("SELECT COUNT(*) as count FROM products")[0]['count']
        else:
            # –†–µ–∑–µ—Ä–≤ –∏–∑ JSON
            all_products = load_products_from_json()
            products = all_products[offset:offset+limit]
            total = len(all_products)
        
        return jsonify({
            "products": products,
            "pagination": {
                "page": page,
                "limit": limit,
                "total": total,
                "pages": (total + limit - 1) // limit
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/admin/products', methods=['POST'])
@require_auth
def admin_create_product():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'brand', 'price', 'category']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        if db.connect():
            # –í—Å—Ç–∞–≤–∫–∞ –≤ PostgreSQL
            query = """
                INSERT INTO products (sku, name, brand, price, original_price, 
                                    category, gender, sizes, colors, description, source)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            sku = f"ADMIN-{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            success = db.execute_command(query, (
                sku,
                data['name'],
                data['brand'], 
                data['price'],
                data.get('original_price'),
                data['category'],
                data.get('gender', 'unisex'),
                json.dumps(data.get('sizes', [])),
                json.dumps(data.get('colors', [])),
                data.get('description', ''),
                'admin'
            ))
            
            if success:
                return jsonify({'message': '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'}), 201
            else:
                return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'}), 500
        
        else:
            return jsonify({'error': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 503
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
def convert_bestsecret_to_dolce(bestsecret_products: List[Dict]) -> List[Dict]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BestSecret —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Dolce"""
    dolce_products = []
    
    for i, product in enumerate(bestsecret_products):
        # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
        current_price_str = str(product.get('current_price', '0')).replace('‚Ç¨', '').replace(',', '.').strip()
        original_price_str = str(product.get('original_price', '0')).replace('‚Ç¨', '').replace(',', '.').strip()
        
        try:
            current_price = int(float(current_price_str) * 100)
        except:
            current_price = 0
        
        try:
            original_price = int(float(original_price_str) * 100)
        except:
            original_price = current_price
        
        dolce_product = {
            "id": product.get('id', f"product_{i + 1}"),
            "name": product.get('name', 'Unknown Product'),
            "brand": product.get('brand', 'Unknown'),
            "price": current_price,
            "originalPrice": original_price,
            "discount": product.get('discount_percentage', '0%'),
            "category": product.get('category', '–û–¥–µ–∂–¥–∞'),
            "color": product.get('color', '–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π'),
            "sizes": product.get('available_sizes', []),
            "image": product.get('image_url', ''),
            "description": f"{product.get('brand', 'Brand')} {product.get('name', 'Product')}",
            "inStock": len(product.get('available_sizes', [])) > 0
        }
        dolce_products.append(dolce_product)
    
    return dolce_products

# =============================================================================
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ UI (–±–∞–∑–æ–≤—ã–π HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
# =============================================================================

@app.route('/admin')
@app.route('/admin/')
def admin_panel():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return render_template_string(ADMIN_PANEL_HTML)

# –ë–∞–∑–æ–≤—ã–π HTML –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_PANEL_HTML = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dolce Deals - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .login-form { background: white; padding: 30px; border-radius: 8px; max-width: 400px; margin: 100px auto; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
        .form-group input { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 4px; }
        .btn { padding: 12px 24px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        .btn:hover { background: #0056b3; }
        .dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .card h3 { color: #333; margin-bottom: 10px; }
        .card .number { font-size: 2em; font-weight: bold; color: #007bff; }
        #loginSection { display: block; }
        #adminSection { display: none; }
        .error { color: #dc3545; margin-top: 10px; }
        .success { color: #28a745; margin-top: 10px; }
    </style>
</head>
<body>
    <!-- –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ -->
    <div id="loginSection">
        <div class="login-form">
            <h2>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
            <form id="loginForm">
                <div class="form-group">
                    <label>–õ–æ–≥–∏–Ω:</label>
                    <input type="text" id="username" value="admin" required>
                </div>
                <div class="form-group">
                    <label>–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="password" value="admin123" required>
                </div>
                <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
                <div id="loginError" class="error"></div>
            </form>
        </div>
    </div>

    <!-- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å -->
    <div id="adminSection">
        <div class="container">
            <div class="header">
                <h1>üõçÔ∏è Dolce Deals - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º</p>
                <button onclick="logout()" class="btn" style="float: right; background: #dc3545;">–í—ã–π—Ç–∏</button>
            </div>

            <div class="dashboard" id="dashboard">
                <div class="card">
                    <h3>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</h3>
                    <div class="number" id="totalProducts">-</div>
                </div>
                <div class="card">
                    <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h3>
                    <div class="number" id="activeProducts">-</div>
                </div>
                <div class="card">
                    <h3>–ë—Ä–µ–Ω–¥–æ–≤</h3>
                    <div class="number" id="totalBrands">-</div>
                </div>
                <div class="card">
                    <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–π</h3>
                    <div class="number" id="totalCategories">-</div>
                </div>
            </div>

            <div class="card">
                <h3>üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                <button class="btn" onclick="loadProducts()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</button>
                <button class="btn" onclick="runParser()" style="background: #28a745;">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä</button>
                <button class="btn" onclick="exportData()" style="background: #17a2b8;">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</button>
            </div>

            <div class="card">
                <h3>üìä –¢–æ–≤–∞—Ä—ã</h3>
                <div id="productsTable">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        </div>
    </div>

    <script>
        let authToken = localStorage.getItem('adminToken');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (authToken) {
            showAdminPanel();
        }

        // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            try {
                const response = await fetch('/admin/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    authToken = data.token;
                    localStorage.setItem('adminToken', authToken);
                    showAdminPanel();
                } else {
                    document.getElementById('loginError').textContent = data.error;
                }
            } catch (error) {
                document.getElementById('loginError').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
            }
        });

        function showAdminPanel() {
            document.getElementById('loginSection').style.display = 'none';
            document.getElementById('adminSection').style.display = 'block';
            loadDashboard();
        }

        function logout() {
            localStorage.removeItem('adminToken');
            authToken = null;
            document.getElementById('loginSection').style.display = 'block';
            document.getElementById('adminSection').style.display = 'none';
        }

        async function loadDashboard() {
            try {
                const response = await fetch('/admin/dashboard', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    document.getElementById('totalProducts').textContent = data.products_stats.total;
                    document.getElementById('activeProducts').textContent = data.products_stats.active;
                    document.getElementById('totalBrands').textContent = data.top_brands.length;
                    document.getElementById('totalCategories').textContent = '6';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            }
        }

        async function loadProducts() {
            try {
                const response = await fetch('/admin/products', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    let html = '<table border="1" style="width:100%"><tr><th>ID</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ë—Ä–µ–Ω–¥</th><th>–¶–µ–Ω–∞</th><th>–°—Ç–∞—Ç—É—Å</th></tr>';
                    data.products.forEach(product => {
                        html += `<tr>
                            <td>${product.id || product.sku}</td>
                            <td>${product.name}</td>
                            <td>${product.brand}</td>
                            <td>${product.price}‚ÇΩ</td>
                            <td>${product.status || 'active'}</td>
                        </tr>`;
                    });
                    html += '</table>';
                    document.getElementById('productsTable').innerHTML = html;
                }
            } catch (error) {
                document.getElementById('productsTable').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤';
            }
        }

        function runParser() {
            alert('üöÄ –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!');
        }

        function exportData() {
            alert('üìä –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!');
        }
    </script>
</body>
</html>
"""

# =============================================================================
# –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ –ò DOLCE –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =============================================================================

@app.route('/')
def serve_dolce_app():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Dolce –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        with open('index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except:
        return """
        <h1>üõçÔ∏è Dolce Deals</h1>
        <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
        <a href="/admin">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
        """

@app.route('/<path:filename>')
def serve_static(filename):
    """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    return send_from_directory('.', filename)

# =============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================

if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5001))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Dolce Admin API Server")
    print(f"üìä –ü–æ—Ä—Ç: {PORT}")
    print(f"üîó –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:{PORT}/")
    print(f"üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:{PORT}/admin")
    print(f"üîß API: http://localhost:{PORT}/api/health")
    print()
    print("üîë –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É:")
    print("   –õ–æ–≥–∏–Ω: admin")
    print("   –ü–∞—Ä–æ–ª—å: admin123")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î
    if db.connect():
        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON —Ä–µ–∑–µ—Ä–≤")
    
    app.run(host='0.0.0.0', port=PORT, debug=False)