#!/usr/bin/env python3
"""
BestSecret Parser GUI - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import json
import sys
import os
from bestsecret_parser import BestSecretParser
import re

class ParserGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("BestSecret Parser")
        self.root.geometry("800x600")
        
        # –ü–∞—Ä—Å–µ—Ä
        self.parser = None
        self.parsing_thread = None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_credentials()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –†–∞–º–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_frame = ttk.LabelFrame(self.root, text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", padding=10)
        auth_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(auth_frame, text="Email:").grid(row=0, column=0, sticky="w", padx=(0, 5))
        self.email_var = tk.StringVar()
        self.email_entry = ttk.Entry(auth_frame, textvariable=self.email_var, width=30)
        self.email_entry.grid(row=0, column=1, sticky="ew", padx=(0, 10))
        
        ttk.Label(auth_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=0, column=2, sticky="w", padx=(0, 5))
        self.password_var = tk.StringVar()
        self.password_entry = ttk.Entry(auth_frame, textvariable=self.password_var, show="*", width=30)
        self.password_entry.grid(row=0, column=3, sticky="ew")
        
        auth_frame.columnconfigure(1, weight=1)
        auth_frame.columnconfigure(3, weight=1)
        
        # –†–∞–º–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        settings_frame = ttk.LabelFrame(self.root, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=10)
        settings_frame.pack(fill="x", padx=10, pady=5)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        ttk.Label(settings_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=0, column=0, sticky="w", padx=(0, 5))
        self.category_var = tk.StringVar(value="–ñ–µ–Ω—Å–∫–æ–µ")
        category_combo = ttk.Combobox(settings_frame, textvariable=self.category_var, 
                                    values=["–ñ–µ–Ω—Å–∫–æ–µ", "–ú—É–∂—Å–∫–æ–µ", "–î–µ—Ç—Å–∫–æ–µ"], state="readonly")
        category_combo.grid(row=0, column=1, sticky="ew", padx=(0, 10))
        
        # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        ttk.Label(settings_frame, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=0, column=2, sticky="w", padx=(0, 5))
        self.subcategory_var = tk.StringVar()
        subcategory_combo = ttk.Combobox(settings_frame, textvariable=self.subcategory_var,
                                       values=["", "WOMEN_LUXURY", "WOMEN_SHOES", "WOMEN_ACCESSORIES", "WOMEN_DESIGNER"],
                                       state="readonly")
        subcategory_combo.grid(row=0, column=3, sticky="ew")
        
        # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤
        ttk.Label(settings_frame, text="–ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤:").grid(row=1, column=0, sticky="w", padx=(0, 5), pady=(5, 0))
        self.max_products_var = tk.StringVar(value="10")
        max_products_entry = ttk.Entry(settings_frame, textvariable=self.max_products_var, width=10)
        max_products_entry.grid(row=1, column=1, sticky="w", pady=(5, 0))
        
        settings_frame.columnconfigure(1, weight=1)
        settings_frame.columnconfigure(3, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill="x", padx=10, pady=5)
        
        self.login_btn = ttk.Button(control_frame, text="–í–æ–π—Ç–∏", command=self.login_clicked)
        self.login_btn.pack(side="left", padx=(0, 5))
        
        self.parse_btn = ttk.Button(control_frame, text="–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", command=self.parse_clicked, state="disabled")
        self.parse_btn.pack(side="left", padx=(0, 5))
        
        self.stop_btn = ttk.Button(control_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_clicked, state="disabled")
        self.stop_btn.pack(side="left", padx=(0, 5))
        
        self.view_data_btn = ttk.Button(control_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.view_data_clicked)
        self.view_data_btn.pack(side="right")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(self.root, mode="indeterminate")
        self.progress.pack(fill="x", padx=10, pady=5)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(self.root, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=5)
        log_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, state="disabled")
        self.log_text.pack(fill="both", expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief="sunken")
        status_bar.pack(fill="x", side="bottom")
    
    def load_credentials(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ .env"""
        try:
            if os.path.exists('.env'):
                with open('.env', 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    email_match = re.search(r'BESTSECRET_EMAIL=(.+)', content)
                    password_match = re.search(r'BESTSECRET_PASSWORD=(.+)', content)
                    
                    if email_match:
                        self.email_var.set(email_match.group(1))
                    if password_match:
                        self.password_var.set(password_match.group(1))
        except Exception as e:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ .env: {e}")
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state="normal")
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.config(state="disabled")
        self.log_text.see(tk.END)
        self.root.update()
    
    def login_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞"""
        if not self.email_var.get() or not self.password_var.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        def login_thread():
            try:
                self.log_message("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.parser = BestSecretParser(self.email_var.get(), self.password_var.get())
                
                if not self.parser.initialize_driver():
                    self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                    return
                
                self.log_message("üîë –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                if self.parser.login():
                    self.log_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    self.status_var.set("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
                    self.parse_btn.config(state="normal")
                    self.login_btn.config(text="–ü–µ—Ä–µ–∑–∞–π—Ç–∏")
                else:
                    self.log_message("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    self.status_var.set("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞")
            finally:
                self.progress.stop()
        
        self.progress.start()
        threading.Thread(target=login_thread, daemon=True).start()
    
    def parse_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not self.parser or not self.parser.is_logged_in:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            return
        
        try:
            max_products = int(self.max_products_var.get())
            if max_products <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        def parse_thread():
            try:
                self.parse_btn.config(state="disabled")
                self.stop_btn.config(state="normal")
                self.status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥...")
                
                category = self.category_var.get()
                subcategory = self.subcategory_var.get() if self.subcategory_var.get() else None
                
                self.log_message(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {category}" + (f" ‚Üí {subcategory}" if subcategory else ""))
                
                products = self.parser.parse_category(category, subcategory, max_products)
                
                self.log_message(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if products:
                    with_prices = sum(1 for p in products if p.current_price)
                    with_sizes = sum(1 for p in products if p.available_sizes)
                    
                    self.log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    self.log_message(f"   –° —Ü–µ–Ω–∞–º–∏: {with_prices}/{len(products)} ({with_prices/len(products)*100:.1f}%)")
                    self.log_message(f"   –° —Ä–∞–∑–º–µ—Ä–∞–º–∏: {with_sizes}/{len(products)} ({with_sizes/len(products)*100:.1f}%)")
                
                self.status_var.set("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            finally:
                self.parse_btn.config(state="normal")
                self.stop_btn.config(state="disabled")
                self.progress.stop()
        
        self.progress.start()
        self.parsing_thread = threading.Thread(target=parse_thread, daemon=True)
        self.parsing_thread.start()
    
    def stop_clicked(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.log_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        if self.parser:
            self.parser.cleanup()
        self.status_var.set("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.parse_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        self.progress.stop()
    
    def view_data_clicked(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists("products_database.json"):
                with open("products_database.json", 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                view_window = tk.Toplevel(self.root)
                view_window.title("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
                view_window.geometry("900x600")
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
                columns = ("name", "brand", "price", "sizes", "category")
                tree = ttk.Treeview(view_window, columns=columns, show="headings", height=20)
                
                tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
                tree.heading("brand", text="–ë—Ä–µ–Ω–¥")
                tree.heading("price", text="–¶–µ–Ω–∞")
                tree.heading("sizes", text="–†–∞–∑–º–µ—Ä—ã")
                tree.heading("category", text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
                
                tree.column("name", width=250)
                tree.column("brand", width=100)
                tree.column("price", width=100)
                tree.column("sizes", width=150)
                tree.column("category", width=100)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
                for item in data:
                    price = f"{item.get('current_price', 0)}‚Ç¨" if item.get('current_price') else "N/A"
                    sizes = ", ".join(item.get('available_sizes', []))[:20] + ("..." if len(", ".join(item.get('available_sizes', []))) > 20 else "")
                    
                    tree.insert("", "end", values=(
                        item.get('name', 'N/A')[:30],
                        item.get('brand', 'N/A'),
                        price,
                        sizes,
                        item.get('category', 'N/A')
                    ))
                
                tree.pack(fill="both", expand=True, padx=10, pady=10)
                
                # –°–∫—Ä–æ–ª–ª–±–∞—Ä
                scrollbar = ttk.Scrollbar(view_window, orient="vertical", command=tree.yview)
                tree.configure(yscrollcommand=scrollbar.set)
                scrollbar.pack(side="right", fill="y")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                info_label = ttk.Label(view_window, text=f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data)}")
                info_label.pack(pady=5)
                
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.parser:
            self.parser.cleanup()
        self.root.destroy()

def main():
    root = tk.Tk()
    app = ParserGUI(root)
    
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()