#!/usr/bin/env python3
"""
Railway –≤–µ—Ä—Å–∏—è Dolce API Server –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ railway.app
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å Telegram Mini App
"""
import os
import json
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Railway
PORT = int(os.environ.get('PORT', 5001))

class DataConverter:
    def __init__(self):
        self.brand_mapping = {
            'Off-White': 'Off-White',
            'Canada Goose': 'Canada Goose', 
            'Gucci': 'Gucci',
            'See by Chlo√©': 'Chlo√©'
        }
        
        self.category_mapping = {
            'shoes': '–û–±—É–≤—å',
            'clothing': '–û–¥–µ–∂–¥–∞',
            'sneakers': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
            'boots': '–ë–æ—Ç–∏–Ω–∫–∏',
            '–ø–∞–ª—å—Ç–æ': '–û–¥–µ–∂–¥–∞',
            '—Ä—É–±–∞—à–∫–∞': '–û–¥–µ–∂–¥–∞'
        }

    def convert_bestsecret_to_dolce(self, bestsecret_products):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö BestSecret –≤ —Ñ–æ—Ä–º–∞—Ç Dolce"""
        dolce_products = []
        
        for i, product in enumerate(bestsecret_products):
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            current_price_str = str(product.get('current_price', '0')).replace('‚Ç¨', '').replace(',', '.').strip()
            original_price_str = str(product.get('original_price', '0')).replace('‚Ç¨', '').replace(',', '.').strip()
            
            try:
                current_price = int(float(current_price_str) * 100)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º EUR –≤ RUB (1:100)
            except:
                current_price = 0
            
            try:
                original_price = int(float(original_price_str) * 100)
            except:
                original_price = current_price
            
            dolce_product = {
                "id": product.get('id', f"product_{i + 1}"),
                "name": product.get('name', 'Unknown Product'),
                "brand": self.brand_mapping.get(product.get('brand', 'Unknown'), product.get('brand', 'Unknown')),
                "price": current_price,
                "originalPrice": original_price,
                "discount": product.get('discount_percentage', '0%'),
                "category": self.category_mapping.get(product.get('category', 'clothing').lower(), '–û–¥–µ–∂–¥–∞'),
                "color": product.get('color', '–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π'),
                "sizes": product.get('available_sizes', []),
                "image": product.get('image_url', ''),
                "description": f"{product.get('brand', 'Brand')} {product.get('name', 'Product')}",
                "inStock": len(product.get('available_sizes', [])) > 0
            }
            dolce_products.append(dolce_product)
        
        return dolce_products

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
converter = DataConverter()

def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists('products_database.json'):
            with open('products_database.json', 'r', encoding='utf-8') as f:
                bestsecret_data = json.load(f)
        else:
            print("Warning: products_database.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ")
            bestsecret_data = {
                "products": [
                    {
                        "id": "demo_1",
                        "name": "Demo Fashion Item",
                        "brand": "Demo Brand",
                        "current_price": "99.99‚Ç¨",
                        "original_price": "199.99‚Ç¨",
                        "discount_percentage": "50%",
                        "category": "clothing",
                        "color": "Black",
                        "available_sizes": ["M", "L", "XL"],
                        "image_url": "https://via.placeholder.com/400x400",
                    }
                ]
            }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Dolce
        dolce_products = converter.convert_bestsecret_to_dolce(bestsecret_data.get('products', []))
        
        return dolce_products
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Dolce Deals</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
    </head>
    <body style="margin:0;padding:20px;font-family:Arial,sans-serif;background:#f5f5f5;">
        <div style="text-align:center;max-width:400px;margin:50px auto;">
            <h1>üõçÔ∏è Dolce Deals</h1>
            <p>Fashion –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤</p>
            <a href="/dolce/" style="background:#4a90e2;color:white;padding:15px 30px;border-radius:10px;text-decoration:none;display:inline-block;">
                –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </a>
        </div>
        <script>
            // Telegram WebApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
            if (window.Telegram && window.Telegram.WebApp) {
                setTimeout(() => {
                    window.location.href = '/dolce/';
                }, 1000);
            }
        </script>
    </body>
    </html>
    """

@app.route('/api/health')
def health_check():
    """Health check –¥–ª—è Railway"""
    products_count = len(load_products())
    return jsonify({
        "status": "healthy",
        "service": "dolce-api",
        "version": "1.0.0",
        "products_loaded": products_count,
        "railway_deployment": True
    })

@app.route('/api/products')
def get_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
    try:
        products = load_products()
        return jsonify(products)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/stats')
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products = load_products()
        
        if not products:
            return jsonify({
                "total_products": 0,
                "brands": [],
                "categories": [],
                "avg_price": 0,
                "in_stock": 0
            })
        
        stats = {
            "total_products": len(products),
            "brands": list(set(p['brand'] for p in products)),
            "categories": list(set(p['category'] for p in products)),
            "avg_price": int(sum(p['price'] for p in products) / len(products)),
            "in_stock": len([p for p in products if p['inStock']]),
            "last_updated": "Railway deployment"
        }
        
        return jsonify(stats)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/products/<product_id>')
def get_product(product_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"""
    try:
        products = load_products()
        product = next((p for p in products if p['id'] == product_id), None)
        
        if product:
            return jsonify(product)
        else:
            return jsonify({"error": "Product not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# –î–ª—è Railway/Gunicorn –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ app –æ–±—ä–µ–∫—Ç
if __name__ == '__main__':
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Dolce API Server –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(load_products())}")
    print(f"üåê Health check: /api/health")
    print(f"üõçÔ∏è API —Ç–æ–≤–∞—Ä—ã: /api/products")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.run(host='0.0.0.0', port=PORT, debug=False)

# Railway –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ Gunicorn