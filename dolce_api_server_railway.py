#!/usr/bin/env python3
"""
Railway –≤–µ—Ä—Å–∏—è Dolce API Server –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ railway.app
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å Telegram Mini App
"""
import os
import json
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Railway
PORT = int(os.environ.get('PORT', 5001))

class DataConverter:
    def __init__(self):
        self.brand_mapping = {
            'Off-White': 'Off-White',
            'Canada Goose': 'Canada Goose', 
            'Gucci': 'Gucci',
            'See by Chlo√©': 'Chlo√©'
        }
        
        self.category_mapping = {
            'shoes': '–û–±—É–≤—å',
            'clothing': '–û–¥–µ–∂–¥–∞',
            'sneakers': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
            'boots': '–ë–æ—Ç–∏–Ω–∫–∏',
            '–ø–∞–ª—å—Ç–æ': '–û–¥–µ–∂–¥–∞',
            '—Ä—É–±–∞—à–∫–∞': '–û–¥–µ–∂–¥–∞'
        }

    def convert_bestsecret_to_dolce(self, bestsecret_products):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö BestSecret –≤ —Ñ–æ—Ä–º–∞—Ç Dolce"""
        dolce_products = []
        
        for i, product in enumerate(bestsecret_products):
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É - —É—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ string
            current_price = product.get('current_price', 0)
            original_price = product.get('original_price', 0)
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
            if isinstance(current_price, str):
                current_price = float(current_price.replace('‚Ç¨', '').replace(',', '.').strip())
            if isinstance(original_price, str):
                original_price = float(original_price.replace('‚Ç¨', '').replace(',', '.').strip())
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º EUR –≤ RUB (1:100)
            current_price_rub = int(current_price * 100)
            original_price_rub = int(original_price * 100) if original_price else current_price_rub
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É
            discount = product.get('discount_percentage', 0)
            if isinstance(discount, (int, float)):
                discount_str = f"{int(discount)}%"
            else:
                discount_str = str(discount)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = ""
            if product.get('image_urls') and isinstance(product['image_urls'], list):
                image_url = product['image_urls'][0] if product['image_urls'] else ""
            else:
                image_url = product.get('image_url', '')
            
            dolce_product = {
                "id": product.get('sku', f"product_{i + 1}"),
                "name": product.get('name', 'Unknown Product'),
                "brand": self.brand_mapping.get(product.get('brand', 'Unknown'), product.get('brand', 'Unknown')),
                "price": current_price_rub,
                "originalPrice": original_price_rub,
                "discount": discount_str,
                "category": self.category_mapping.get(product.get('category', 'clothing'), '–û–¥–µ–∂–¥–∞'),
                "color": product.get('color', '–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π'),
                "sizes": product.get('available_sizes', []),
                "image": image_url,
                "description": f"{product.get('brand', 'Brand')} {product.get('name', 'Product')}",
                "inStock": len(product.get('available_sizes', [])) > 0
            }
            dolce_products.append(dolce_product)
        
        return dolce_products

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
converter = DataConverter()

def load_products():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists('products_database.json'):
            with open('products_database.json', 'r', encoding='utf-8') as f:
                bestsecret_data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            if isinstance(bestsecret_data, list):
                # –≠—Ç–æ –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
                products = bestsecret_data
            else:
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º products
                products = bestsecret_data.get('products', [])
                
        else:
            print("Warning: products_database.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ")
            products = [
                {
                    "sku": "demo_1",
                    "name": "Demo Fashion Item",
                    "brand": "Demo Brand",
                    "current_price": 99.99,
                    "original_price": 199.99,
                    "discount_percentage": "50%",
                    "category": "clothing",
                    "color": "Black",
                    "available_sizes": ["M", "L", "XL"],
                    "image_urls": ["https://via.placeholder.com/400x400"],
                }
            ]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Dolce
        dolce_products = converter.convert_bestsecret_to_dolce(products)
        
        return dolce_products
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

@app.route('/')
@app.route('/dolce/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Dolce –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        with open('embedded_app.html', 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ embedded_app.html: {e}")
        # Fallback –≤–µ—Ä—Å–∏—è
        return """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Dolce Deals</title>
            <script src="https://telegram.org/js/telegram-web-app.js"></script>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                .container { max-width: 400px; margin: 50px auto; text-align: center; background: white; padding: 30px; border-radius: 12px; }
                .btn { display: inline-block; padding: 15px 30px; background: #4a90e2; color: white; text-decoration: none; border-radius: 8px; margin: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üõçÔ∏è Dolce Deals</h1>
                <p>Fashion –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤</p>
                <a href="/api/health" class="btn">üìä Health Check</a>
                <a href="/api/products" class="btn">üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã</a>
                <div id="products"></div>
                <script>
                    fetch('/api/products')
                        .then(r => r.json())
                        .then(products => {
                            document.getElementById('products').innerHTML = 
                                '<h3>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ' + products.length + '</h3>' +
                                products.map(p => 
                                    '<div style="border:1px solid #ddd;margin:10px;padding:10px;">' +
                                    '<strong>' + p.brand + ' ' + p.name + '</strong><br>' +
                                    '–¶–µ–Ω–∞: ' + p.price + '‚ÇΩ' +
                                    '</div>'
                                ).join('');
                        })
                        .catch(e => {
                            document.getElementById('products').innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + e.message;
                        });
                </script>
            </div>
        </body>
        </html>
        """

@app.route('/api/health')
def health_check():
    """Health check –¥–ª—è Railway"""
    products_count = len(load_products())
    return jsonify({
        "status": "healthy",
        "service": "dolce-api",
        "version": "1.0.0",
        "products_loaded": products_count,
        "railway_deployment": True
    })

@app.route('/api/products')
def get_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
    try:
        products = load_products()
        return jsonify(products)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/stats')
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        products = load_products()
        
        if not products:
            return jsonify({
                "total_products": 0,
                "brands": [],
                "categories": [],
                "avg_price": 0,
                "in_stock": 0
            })
        
        stats = {
            "total_products": len(products),
            "brands": list(set(p['brand'] for p in products)),
            "categories": list(set(p['category'] for p in products)),
            "avg_price": int(sum(p['price'] for p in products) / len(products)),
            "in_stock": len([p for p in products if p['inStock']]),
            "last_updated": "Railway deployment"
        }
        
        return jsonify(stats)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/products/<product_id>')
def get_product(product_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"""
    try:
        products = load_products()
        product = next((p for p in products if p['id'] == product_id), None)
        
        if product:
            return jsonify(product)
        else:
            return jsonify({"error": "Product not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# –î–ª—è Railway/Gunicorn –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ app –æ–±—ä–µ–∫—Ç
if __name__ == '__main__':
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Dolce API Server –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(load_products())}")
    print(f"üåê Health check: /api/health")
    print(f"üõçÔ∏è API —Ç–æ–≤–∞—Ä—ã: /api/products")
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.run(host='0.0.0.0', port=PORT, debug=False)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è Railway
@app.route('/style.css')
def serve_css():
    """CSS —Ñ–∞–π–ª"""
    return send_from_directory('.', 'style.css', mimetype='text/css')

@app.route('/app.js')
def serve_app_js():
    """–û—Å–Ω–æ–≤–Ω–æ–π JS —Ñ–∞–π–ª"""
    return send_from_directory('.', 'app.js', mimetype='application/javascript')

@app.route('/app_with_api.js') 
def serve_api_js():
    """API JS —Ñ–∞–π–ª"""
    return send_from_directory('.', 'app_with_api.js', mimetype='application/javascript')

@app.route('/data/categories.js')
def serve_categories():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ JS"""
    return send_from_directory('./data', 'categories.js', mimetype='application/javascript')

@app.route('/manifest.json')
def serve_manifest():
    """PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç"""
    return send_from_directory('.', 'manifest.json', mimetype='application/json')

@app.route('/assets/<path:filename>')
def serve_assets(filename):
    """Assets —Ñ–∞–π–ª—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–∫–æ–Ω–∫–∏)"""
    return send_from_directory('./assets', filename)

@app.route('/sw.js')
def serve_sw():
    """Service Worker"""
    return send_from_directory('.', 'sw.js', mimetype='application/javascript')

@app.route('/data/<path:filename>')
def serve_data(filename):
    """Data —Ñ–∞–π–ª—ã"""
    return send_from_directory('./data', filename)

# Railway –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ Gunicorn