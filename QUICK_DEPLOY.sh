#!/bin/bash
# üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π Dolce Deals –Ω–∞ —Å–µ—Ä–≤–µ—Ä

echo "üåü –ù–ê–ß–ò–ù–ê–ï–ú –î–ï–ü–õ–û–ô DOLCE DEALS –ù–ê –°–ï–†–í–ï–†"
echo "========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo $0" 
   exit 1
fi

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω
read -p "üåê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (example.com): " DOMAIN
if [[ -z "$DOMAIN" ]]; then
    echo "‚ùå –î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
echo "üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p /var/www/dolce-app
mkdir -p /var/log/dolce
mkdir -p /root/backups

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
apt install python3 python3-pip git nginx certbot python3-certbot-nginx curl unzip -y

# Python –ø–∞–∫–µ—Ç—ã
pip3 install flask flask-cors gunicorn requests selenium beautifulsoup4

# Chrome –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
echo "üåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Chrome..."
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
apt update && apt install google-chrome-stable -y

# ChromeDriver
echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChromeDriver..."
CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}/chromedriver_linux64.zip"
unzip /tmp/chromedriver.zip -d /usr/local/bin/
chmod +x /usr/local/bin/chromedriver

# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Nginx..."
cat > /etc/nginx/sites-available/dolce-app << EOF
server {
    listen 80;
    server_name $DOMAIN;
    
    location / {
        root /var/www/dolce-app/dolce;
        index index.html;
        try_files \$uri \$uri/ /index.html;
        
        add_header X-Frame-Options ALLOWALL;
        add_header Access-Control-Allow-Origin *;
    }
    
    location /api/ {
        proxy_pass http://localhost:5001;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

ln -sf /etc/nginx/sites-available/dolce-app /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t && systemctl reload nginx

# Systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è API
echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å..."
cat > /etc/systemd/system/dolce-api.service << EOF
[Unit]
Description=Dolce API Server
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/var/www/dolce-app
Environment=PYTHONPATH=/var/www/dolce-app
ExecStart=/usr/bin/python3 dolce_api_server.py
Restart=always
RestartSec=10
StandardOutput=append:/var/log/dolce/api.log
StandardError=append:/var/log/dolce/api.log

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable dolce-api

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
echo "üï∑Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥..."
cat > /var/www/dolce-app/run_parser.sh << 'EOF'
#!/bin/bash
cd /var/www/dolce-app
export DISPLAY=:99
python3 bestsecret_parser.py >> /var/log/dolce/parser.log 2>&1
EOF

chmod +x /var/www/dolce-app/run_parser.sh

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron
echo "‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏..."
(crontab -l 2>/dev/null; echo "0 */6 * * * /var/www/dolce-app/run_parser.sh") | crontab -
(crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
(crontab -l 2>/dev/null; echo "0 2 * * * tar -czf /root/backups/dolce_\$(date +%Y%m%d).tar.gz /var/www/dolce-app/") | crontab -

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª
echo "üîí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å..."
ufw --force enable
ufw allow ssh
ufw allow 'Nginx Full'

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > /var/www/dolce-app/status.sh << 'EOF'
#!/bin/bash
echo "=== DOLCE APP STATUS ==="
date
echo
echo "Services:"
echo "API: $(systemctl is-active dolce-api)"
echo "Nginx: $(systemctl is-active nginx)"
echo
echo "API Health:"
curl -s http://localhost:5001/api/health 2>/dev/null | python3 -c "import sys,json; print('‚úÖ OK' if json.load(sys.stdin).get('status')=='healthy' else '‚ùå Error')" 2>/dev/null || echo "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
echo
echo "Disk Usage:"
df -h /var/www/dolce-app | tail -1
echo
echo "Last Parser Run:"
if [[ -f /var/log/dolce/parser.log ]]; then
    tail -1 /var/log/dolce/parser.log
else
    echo "–ü–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è"
fi
EOF

chmod +x /var/www/dolce-app/status.sh

echo ""
echo "‚úÖ –°–ï–†–í–ï–† –ù–ê–°–¢–†–û–ï–ù!"
echo "=================="
echo ""
echo "üìã –ß–¢–û –î–ê–õ–¨–®–ï:"
echo "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã –≤ /var/www/dolce-app/"
echo "   scp -r EcommerceParser/* root@$DOMAIN:/var/www/dolce-app/"
echo ""
echo "2. –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:"
echo "   sed -i 's/localhost:5001/$DOMAIN/g' /var/www/dolce-app/dolce/app_with_api.js"
echo ""
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "   systemctl start dolce-api"
echo ""
echo "4. –ü–æ–ª—É—á–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:"
echo "   certbot --nginx -d $DOMAIN"
echo ""
echo "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Bot:"
echo "   - –ò–¥–∏—Ç–µ –∫ @BotFather"
echo "   - /setmenubutton"
echo "   - Web App URL: https://$DOMAIN"
echo ""
echo "üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê:"
echo "   /var/www/dolce-app/status.sh"
echo ""
echo "üìÇ –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´:"
echo "   –õ–æ–≥–∏ API: /var/log/dolce/api.log"
echo "   –õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞: /var/log/dolce/parser.log"
echo "   –ö–æ–Ω—Ñ–∏–≥ Nginx: /etc/nginx/sites-available/dolce-app"
echo "   Systemd —Å–µ—Ä–≤–∏—Å: /etc/systemd/system/dolce-api.service"
echo ""
echo "üéâ –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï!"